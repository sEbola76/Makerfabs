substitutions:
  name: "esphome-web-xxxxxx-1-28"
  friendly_name: "ESPHome Web xxxxxx 1.28"
  device_description: "Makerfabs MaTouch ESP32-S3 RotaryIPS Display 1.28 GC9A01"
  project_name: "Makerfabs.MaTouch-ESP32-S3-RotaryIPS-Display1_28-GC9A01"
  project_version: "1.0.0"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  project:
    name: "${project_name}"
    version: "${project_version}"
  min_version: 2024.11.0
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio
    board_build.arduino.memory_type: qio_opi
    build_flags: "-DBOARD_HAS_PSRAM"
    board_upload.maximum_ram_size: 524288
  on_boot:
    priority: 600
    then:
      - delay: 2s
      - lvgl.widget.hide: boot_screen
esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: y
      CONFIG_ESP32S3_DATA_CACHE_64KB: y
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y
psram:
  speed: 80MHz
  mode: octal

# Enable logging
logger:
  level: DEBUG 

debug:
  update_interval: 30s

# Enable Home Assistant API
api:

ota:
  - platform: esphome

mdns:
  disabled: false
  
wifi:
  power_save_mode: none
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password

captive_portal:
      
# --------------------------------------
# -            HARDWARE                -
# --------------------------------------

i2c:
  - id: i2c_bus
    sda: 17
    scl: 18
    scan: true
    frequency: 400kHz

  - id: i2c_touch
    sda: 38
    scl: 39
    scan: true
    frequency: 400kHz
  

spi:
  id: spi_bus
  mosi_pin: GPIO13
  clk_pin: GPIO14

output:
  # - platform: ledc
  #   pin: GPIO3
  #   id: buzzer
  - platform: ledc
    pin: GPIO7
    id: backlight_output
# --------------------------------------
# -            DISPLAY                 -
# --------------------------------------
display:
  - platform: ili9xxx
    id: round_display
    model: GC9A01A
    cs_pin: GPIO15
    reset_pin: GPIO11
    dc_pin: GPIO21
    invert_colors: true
    auto_clear_enabled: false
    color_order: bgr

touchscreen:
  platform: cst816
  id: touch
  interrupt_pin: GPIO40
  reset_pin: GPIO16
  i2c_id: i2c_touch
  on_touch:
    - logger.log:
        format: Touch at (%d, %d)
        args: [touch.x, touch.y]
    - lambda: |-
        ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
            touch.x,
            touch.y,
            touch.x_raw,
            touch.y_raw
            );
  on_release:
    - if:
        condition: lvgl.is_paused
        then:
          - logger.log: "LVGL resuming"
          - lvgl.resume:
          - lvgl.widget.redraw:
    - light.turn_on: 
        id: display_backlight
        brightness: 100%

# --------------------------------------
# -            GUI                     -
# --------------------------------------
font:
  - file: "gfonts://Roboto"
    id: roboto24
    size: 24
    bpp: 4
    glyphsets: GF_Latin_Core
  - file: "gfonts://Roboto"
    id: roboto32
    size: 32
    bpp: 4
    glyphsets: GF_Latin_Core
  - file: "gfonts://Roboto"
    id: roboto48
    size: 48
    bpp: 4
    glyphsets: GF_Latin_Core
  - file: "gfonts://Roboto"
    id: roboto64
    size: 64
    bpp: 4
    glyphsets: GF_Latin_Core
image:
  - file: https://esphome.io/_static/favicon-512x512.png
    id: boot_logo
    resize: 200x200
    type: RGB565
    transparency: opaque

lvgl:
  displays:
    - round_display
  touchscreens:
    - touch
  encoders:
    sensor: encoder
    enter_button: front_button
  on_idle:
    timeout: !lambda "return (id(display_timeout).state * 1000);"
    then:
    - logger.log: "LVGL is idle"
    - light.turn_on: 
        id: display_backlight
        brightness: 20%
    #- lvgl.pause:
  default_font: roboto24
  top_layer:
    widgets:
      # make sure it's the last one in this list:
      - obj:
          id: boot_screen
          x: 0
          y: 0
          width: 100%
          height: 100%
          bg_color: black
          bg_opa: COVER
          radius: 0
          pad_all: 0
          border_width: 0
          widgets:
            - image:
                align: CENTER
                src: boot_logo
                y: -40
            - spinner:
                align: CENTER
                y: 95
                height: 50
                width: 50
                spin_time: 1s
                arc_length: 60deg
                arc_width: 8
                indicator:
                  arc_color: 0x18bcf2
                  arc_width: 8
          on_press:
            - lvgl.widget.hide: boot_screen
  

# --------------------------------------
# -            SENSORS                 -
# --------------------------------------
binary_sensor:
  - platform: gpio
    name: Button
    id: front_button
    pin: 
      number: GPIO6
      inverted: True

sensor:
  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    type:
      timestamp
    entity_category: "diagnostic"

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

  - platform: rotary_encoder
    id: encoder
    pin_a: GPIO9
    pin_b: GPIO10

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: "diagnostic"
    ssid:
      name: "Connected SSID"
      entity_category: "diagnostic"
    mac_address:
      name: "Mac Address"
      entity_category: "diagnostic"

  #  Creates a sensor showing when the device was last restarted
  - platform: template
    name: 'Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: "diagnostic"
  - platform: debug
    device:
      name: "Device Info"
    reset_reason:
      name: "Reset Reason"
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - minutes: '*'
        seconds: 0/1
        then:
          - script.execute: time_update
    on_time_sync:
      then:
        - script.execute: time_update
  - platform: sntp
    id: sntp_time
  # Define the timezone of the device
    timezone: ""
  # Change sync interval from default 5min to 6 hours (or as set in substitutions)
    update_interval: 6h
  # Set specific sntp servers to use
    servers:
      - "0.pool.ntp.org"
      - "1.pool.ntp.org"
      - "2.pool.ntp.org"
  # Publish the time the device was last restarted
    on_time_sync:
      then:
        # Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
script:
  - id: time_update
    then:
      - if:
          condition: lvgl.is_paused
          then:
            - lvgl.resume:
            - lvgl.widget.redraw:
      # - lvgl.label.update:
      #     id: label_time
      #     text: !lambda |-
      #       auto time = id(sntp_time).now();
      #       return time.strftime("%H:%M:%S");
number:
  - platform: template
    name: Screen timeout
    optimistic: true
    id: display_timeout
    unit_of_measurement: "s"
    initial_value: 45
    restore_value: true
    min_value: 10
    max_value: 180
    step: 5
    mode: slider
light:
  - platform: monochromatic
    name: "Backlight"
    output: backlight_output
    id: display_backlight
    restore_mode: ALWAYS_ON


